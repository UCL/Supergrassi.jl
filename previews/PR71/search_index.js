var documenterSearchIndex = {"docs":
[{"location":"#Supergrassi.jl","page":"Introduction","title":"Supergrassi.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This is the reference documentation of Supergrassi.jl.","category":"page"},{"location":"#Index","page":"Introduction","title":"Index","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"#Types","page":"Introduction","title":"Types","text":"","category":"section"},{"location":"#Supergrassi.FilePath","page":"Introduction","title":"Supergrassi.FilePath","text":"FilePath(path::String)\n\nA structure for file paths.\n\nFields\n\npath::String: The full path.\ndirectory::String: The directory.\nfile::String: The file name.\nextension::String: The file extension.\n\n\n\n\n\n","category":"type"},{"location":"#Functions","page":"Introduction","title":"Functions","text":"","category":"section"},{"location":"#Supergrassi.check_file_availability-Tuple{Dict}","page":"Introduction","title":"Supergrassi.check_file_availability","text":"check_file_availability(settings::Dict)\n\nVerifies the availability of data files.\n\nArguments\n\nsettings::Dict{<:Any, <:Any}: The settings dictionary.\n\nReturns\n\nDict{String, FilePath}: A dictionary of file paths.\n\nExamples\n\nsettings = Dict(\n    \"files\" => Dict(\n        \"input_dir\" => \"data\",\n        \"input_derived_dir\" => \"derived\",\n        \"inputs\" => Dict(\n            \"base\" => Dict(\n                \"data\" => \"data.csv\"\n            ),\n            \"derived\" => Dict(\n                \"scenario_independent\" => Dict(\n                    \"data\" => \"data.csv\"\n                ),\n                \"scenario_dependent\" => Dict(\n                    \"data\" => \"data.csv\"\n                )\n            )\n        )\n    ),\n    \"version\" => \"v1\",\n    \"files\" => Dict(\n        \"scenario\" => \"1\"\n    )\n)\n\nfilepaths = check_file_availability(settings)\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.classify_dict-Tuple{Dict{Any, Any}}","page":"Introduction","title":"Supergrassi.classify_dict","text":"classify_dict(dict::Dict)\n\nClassifies a dictionary type based on the types of its keys and values. Used to create a typed dictionary from an untyped dictionary extracted from a YAML file.\n\nArguments\n\ndict::Dict{Any, Any}: The dictionary to classify.\n\nReturns\n\nDict{key_type, value_type}: The classified dictionary.\n\nExamples\n\nuntyped_dict = YAML.load_file(\"settings.yaml\")\ntyped_dict = classify_dict(dict)\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.clean_1d_values-Tuple{Vector{<:Number}, Vector{<:Number}, Dict{String, String}, Dict{String, String}, Vector, Vector, Float64, Bool}","page":"Introduction","title":"Supergrassi.clean_1d_values","text":"Function to process the values that are split between uk, eu, world and stored in vectors.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.clean_2d_values-Tuple{Supergrassi.Data, Float64}","page":"Introduction","title":"Supergrassi.clean_2d_values","text":"Function to process the mValues stored in inputoutputmatrix:es in the data struct\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.clean_data-Tuple{Supergrassi.Data, Dict{String, Any}}","page":"Introduction","title":"Supergrassi.clean_data","text":"clean_data(data::Data, settings::Dict{String, Any})\n\nMain function for data cleaning. Should take in a Data struct and return a CleanData struct.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.clean_exports-Tuple{Supergrassi.InputOutput, Supergrassi.InputOutput, Float64, Vector, Bool, Dict{String, String}, Dict{String, String}}","page":"Introduction","title":"Supergrassi.clean_exports","text":"Exports need a special treatment because they are a sum of export and services_export data frames. Service export is scaled by the sum of eu and world exports. Further refactoring definitely possible here.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.clean_household-Tuple{Supergrassi.Data, Int64, Dict{String, String}, Dict{String, String}, Vector, Vector, Vector, Bool}","page":"Introduction","title":"Supergrassi.clean_household","text":"Function to process the household incomes and their derived data.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.compute_all_parameters","page":"Introduction","title":"Supergrassi.compute_all_parameters","text":"Compute all utility function parameters from regional data, elasticities and prices.   Currently missing some of the Î³ parameters\n\nfun parameter should be either parametersbyregion or logparametersby_region\n\n\n\n\n\n","category":"function"},{"location":"#Supergrassi.compute_objective_function-Tuple{Vector{<:Number}, Supergrassi.CleanData, Supergrassi.Parameters}","page":"Introduction","title":"Supergrassi.compute_objective_function","text":"compute_objective_function(x::Vector{<:Number}, data::CleanData, params::Parameters)\n\nComputes the objective function value based on a vector of parameters.\n\nArguments\n\nx::Vector{<:Number}: Vector containing log prices and zOC values.\ndata::CleanData: Cleaned data structure containing industry and regional information.\nparams::Parameters: Parameters structure containing production and constants.\n\nReturns\n\nobjective_value::Float64: The computed objective function value.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.compute_objective_function-Tuple{Vector{<:Number}, Vector{<:Number}, Supergrassi.CleanData, Supergrassi.Parameters}","page":"Introduction","title":"Supergrassi.compute_objective_function","text":"function compute_objective_function(log_price_uk::Vector{<:Number}, zOC::Vector{<:Number}, data::CleanData, params::Parameters)\n\nComputes the objective function value based on the log prices and zOC values.\n\nArguments\n\nlog_price_uk::Vector{<:Number}: Logarithm of UK prices.\nzOC::Vector{<:Number}: Vector of zOC values.\ndata::CleanData: Cleaned data structure containing industry and regional information.\nparams::Parameters: Parameters structure containing production and constants.\n\nReturns\n\nobjective_value::Float64: The computed objective function value.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.compute_parameter-Tuple{DataFrames.DataFrame, Supergrassi.Elasticity, DataFrames.DataFrame, Bool}","page":"Introduction","title":"Supergrassi.compute_parameter","text":"Compute 1d utility function parameters from a regional demand data frame and the corresponding elasticity.   Currently missing the tilde parameters for exports.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.compute_production_parameter-Tuple{Supergrassi.CleanData, DataFrames.DataFrame, Bool}","page":"Introduction","title":"Supergrassi.compute_production_parameter","text":"Compute the 2d utility function parameters from regional InputMatrices and the corresponding elasticity.   Currently missing the jacobian, and the 1d parameters gammaL and gammaH\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.convert_to_ratio!-Tuple{DataFrames.DataFrame}","page":"Introduction","title":"Supergrassi.convert_to_ratio!","text":"convert_to_ratio!(df::DataFrame)\n\nConvert regional vector data into fractions of the aggregate value. Then renormalise the aggregate value by its sum. Nans are replaced with 0's.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.convert_to_ratio!-Tuple{Supergrassi.InputMatrices}","page":"Introduction","title":"Supergrassi.convert_to_ratio!","text":"convert_to_ratio!(data::InputMatrices)\n\nConvert regional matrix data to fractions of the aggregate value Nans are replaced with 0's\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.convert_to_ratio!-Tuple{Supergrassi.RegionalData}","page":"Introduction","title":"Supergrassi.convert_to_ratio!","text":"convert_to_ratio!(data::RegionalData)\n\nConvert regional data into ratios of region / sum(regions)\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.correct_exports_with_services!-Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}","page":"Introduction","title":"Supergrassi.correct_exports_with_services!","text":"Helper function for exports\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.create_filepath-Tuple{String}","page":"Introduction","title":"Supergrassi.create_filepath","text":"create_filepath(basepath::String)\n\nCreates a file path.\n\nArguments\n\nfile_path::FilePath: The file path object.\n\nReturns\n\nBool: Whether the file path is valid.\n\nExamples\n\nfile_path = FilePath(\"data.csv\")\nprintln(is_valid) # true\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.create_filepath_from_template-Tuple{String, Dict{String, Any}}","page":"Introduction","title":"Supergrassi.create_filepath_from_template","text":"create_filepath_from_template(basepath::String, substitution_dict::Dict{String, Any})\n\nCreates a file path from a template string and a dictionary of substitutions.\n\nArguments\n\nbasepath::String: The template string.\nsubstitution_dict::Dict{String, Any}: The dictionary of substitutions.\n\nReturns\n\nFilePath: The file path object.\n\nExamples\n\nsubstitutions = Dict(\n    \"name\" => \"data\",\n    \"format\" => \"csv\",\n    \"directory\" => \"dir\",\n    \"suffix\" => 1,\n)\n\ntemplate = \"{directory}/{name}{suffix}.{format}\"\nfilepath = create_filepath_from_template(template, substitutions)\nprintln(filepath.path) # \"dir/data1.csv\"\nprintln(filepath.directory) # \"dir\"\nprintln(filepath.file) # \"data1.csv\"\nprintln(filepath.extension) # \".csv\"\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.firms_parameters_by_region-Union{Tuple{T}, Tuple{T, Vector{T}, Vector{T}, Vector{T}, Matrix{T}, Matrix{T}, Matrix{T}}} where T<:Real","page":"Introduction","title":"Supergrassi.firms_parameters_by_region","text":"Compute utility function parameters (Î³) by region considered in the model for the firms production function.   This is a wrapper around parametersbyregion, but here we have to consider inputs to each firm from each firm   which increases the dimension of the parameter array.\n\nMatlab code reference ComputeTheta.m lines 257-259\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.log_eu_expenditure_on_uk_exports-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Vararg{T, 6}}} where T<:Real","page":"Introduction","title":"Supergrassi.log_eu_expenditure_on_uk_exports","text":"Compute the share of EU expenditure on UK exports, defined in section 2.2.1 of the main paper.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.log_parameter_by_region-Union{Tuple{T}, NTuple{4, T}} where T<:Real","page":"Introduction","title":"Supergrassi.log_parameter_by_region","text":"Compute log of an utility function parameter for a single region\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.log_parameters_by_region-Union{Tuple{T}, NTuple{7, T}} where T<:Real","page":"Introduction","title":"Supergrassi.log_parameters_by_region","text":"Compute log of utility function parameters. See parametersbyregion.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.log_price_index-Union{Tuple{T}, NTuple{7, T}} where T<:Real","page":"Introduction","title":"Supergrassi.log_price_index","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.log_total_price_index-Union{Tuple{T}, Tuple{T, Vector{T}, Vector{T}}} where T<:Real","page":"Introduction","title":"Supergrassi.log_total_price_index","text":"Compute the consumer price index defined in equation 2.7 of the main paper as \bar{P}.   Matlab code reference e.g. ComputeTheta.m line 58.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.parameter_by_region-Union{Tuple{T}, NTuple{4, T}} where T<:Real","page":"Introduction","title":"Supergrassi.parameter_by_region","text":"Compute an utility function parameter for a single region\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.parameters_by_region-Union{Tuple{T}, NTuple{7, T}} where T<:Real","page":"Introduction","title":"Supergrassi.parameters_by_region","text":"Compute utility function parameters by region considered in the model (uk, eu, rest of world).   Parameters of this type appear in multiple utility functions in the paper, and are annotated   (at least) Î±, Î²1, Î²2, Î³ and Ï.\n\nThis is refactored from the Matlab code in e.g. ComputeTheta lines 62-64\n\nArguments\n\nelasticity [Ïµ, Ï1, Ï2, Î·, Î¾]\nlogprice{uk, eu, w} [log(p)]\nquantity_{uk, eu, w} [f, x1, x2, I, m]\n\nOutputs\n\nweight_{uk, eu, w}\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.price_index-Union{Tuple{T}, NTuple{7, T}} where T<:Real","page":"Introduction","title":"Supergrassi.price_index","text":"Compute the the consumer price index defined in equation 2.3 of the main paper as \bar{p}.   Matlab code reference e.g. ComputeTheta.m line 49.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.productivity_shock_mean-Union{Tuple{T}, Tuple{Supergrassi.Elasticity, Vector{T}, Vector{T}, Vector{T}, Vector{T}, Vector{T}, Vector{T}, Vector{T}, T, T, T, T, T, T, Int64, Bool}} where T<:Real","page":"Introduction","title":"Supergrassi.productivity_shock_mean","text":"Compute the productivity shock mean Î¼\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.read_settings-Tuple{Supergrassi.FilePath}","page":"Introduction","title":"Supergrassi.read_settings","text":"read_settings(file_path::FilePath)\n\nReads settings from a YAML file and classifies the dictionary.\n\nArguments\n\nfile_path::FilePath: The path to the YAML file containing settings.\n\nReturns\n\nDict{key_type, value_type}: The classified settings dictionary.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.rescale_data!-Tuple{Supergrassi.CleanData}","page":"Introduction","title":"Supergrassi.rescale_data!","text":"rescale_data!(data::CleanData)\n\nRe-scale the data that does not get convereted into a ratio explicitly, following https://github.com/UCL/Supergrassi/blob/main/code/matlab/macro_v2/DataCleaning/RescaleData.m.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.round_shares!","page":"Introduction","title":"Supergrassi.round_shares!","text":"round_shares!(df::DataFrame, threshold = 1e-4)\n\nRound shares in regional vector data\n\n\n\n\n\n","category":"function"},{"location":"#Supergrassi.round_shares!-2","page":"Introduction","title":"Supergrassi.round_shares!","text":"round_shares!(data::RegionalData, threshold::Float64 = 1e-4)\n\nRound values below threshold in regional data to 0, then rescale so that regions sum to 1.\n\n\n\n\n\n","category":"function"},{"location":"#Supergrassi.round_shares!-3","page":"Introduction","title":"Supergrassi.round_shares!","text":"round_shares!(data::InputMatrices, threshold = 1e-4)\n\nRound shares in regional matrix data\n\n\n\n\n\n","category":"function"},{"location":"#Supergrassi.total_capital_parameters-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Vector{T}, Vector{T}, Vector{T}, Vector{T}, Vector{T}, T, T, T, T, T, Supergrassi.Elasticity, T, Bool}} where T","page":"Introduction","title":"Supergrassi.total_capital_parameters","text":"Compute the total parameter (Î³K) for the firms capital utility function.\n\nMatlab code reference ComputeTheta.m line 254\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.total_input_parameters-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Vector{T}, Vector{T}, Vector{T}, Vector{T}, Vector{T}, T, T, T, T, T, Supergrassi.Elasticity, T, Bool}} where T<:Real","page":"Introduction","title":"Supergrassi.total_input_parameters","text":"Compute the total parameter (Î³M) for the firms input utility function.\n\nMatlab code reference ComputeTheta.m line 251\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.total_labor_parameters-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Vector{T}, Vector{T}, Vector{T}, Vector{T}, Vector{T}, T, T, T, T, T, Supergrassi.Elasticity, T, Bool}} where T","page":"Introduction","title":"Supergrassi.total_labor_parameters","text":"Compute the total parameter (Î³H) for the firms labor utility function.\n\nMatlab code reference ComputeTheta.m line 249\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.total_parameters-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, T}} where T<:Real","page":"Introduction","title":"Supergrassi.total_parameters","text":"Compute the total utility function parameter. Parameters of this type appear in multiple utility function   in the paper, and are annotated (at least) Î±, Î²1, Î²2, Î³ and Ï.\n\nThis is refactored from the Matlab code in e.g. ComputeTheta.m line 59\n\nArguments\n\nlogpriceindex: price index computed by logpriceindex()\nquantity: total quantity [f, x1, x2, I, m]\nelasticity: [Ïµ, Ï1, Ï2, Î·, Î¾]\n\nOutputs\n\nparameters\n\n\n\n\n\n","category":"method"},{"location":"#Constants","page":"Introduction","title":"Constants","text":"","category":"section"}]
}
