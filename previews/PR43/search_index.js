var documenterSearchIndex = {"docs":
[{"location":"#Supergrassi.jl","page":"Introduction","title":"Supergrassi.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This is the reference documentation of Supergrassi.jl.","category":"page"},{"location":"#Index","page":"Introduction","title":"Index","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"#Types","page":"Introduction","title":"Types","text":"","category":"section"},{"location":"#Supergrassi.FilePath","page":"Introduction","title":"Supergrassi.FilePath","text":"FilePath(path::String)\n\nA structure for file paths.\n\nFields\n\npath::String: The full path.\ndirectory::String: The directory.\nfile::String: The file name.\nextension::String: The file extension.\n\n\n\n\n\n","category":"type"},{"location":"#Functions","page":"Introduction","title":"Functions","text":"","category":"section"},{"location":"#Supergrassi.check_file_availability-Tuple{Dict}","page":"Introduction","title":"Supergrassi.check_file_availability","text":"check_file_availability(settings::Dict)\n\nVerifies the availability of data files.\n\nArguments\n\nsettings::Dict{<:Any, <:Any}: The settings dictionary.\n\nReturns\n\nDict{String, FilePath}: A dictionary of file paths.\n\nExamples\n\nsettings = Dict(\n    \"files\" => Dict(\n        \"input_dir\" => \"data\",\n        \"input_derived_dir\" => \"derived\",\n        \"inputs\" => Dict(\n            \"base\" => Dict(\n                \"data\" => \"data.csv\"\n            ),\n            \"derived\" => Dict(\n                \"scenario_independent\" => Dict(\n                    \"data\" => \"data.csv\"\n                ),\n                \"scenario_dependent\" => Dict(\n                    \"data\" => \"data.csv\"\n                )\n            )\n        )\n    ),\n    \"version\" => \"v1\",\n    \"files\" => Dict(\n        \"scenario\" => \"1\"\n    )\n)\n\nfilepaths = check_file_availability(settings)\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.classify_dict-Tuple{Dict{Any, Any}}","page":"Introduction","title":"Supergrassi.classify_dict","text":"classify_dict(dict::Dict)\n\nClassifies a dictionary type based on the types of its keys and values. Used to create a typed dictionary from an untyped dictionary extracted from a YAML file.\n\nArguments\n\ndict::Dict{Any, Any}: The dictionary to classify.\n\nReturns\n\nDict{key_type, value_type}: The classified dictionary.\n\nExamples\n\nuntyped_dict = YAML.load_file(\"settings.yaml\")\ntyped_dict = classify_dict(dict)\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.clean_1d_values-Tuple{Vector{<:Number}, Vector{<:Number}, Dict{String, String}, Dict{String, String}, Vector, Vector, Float64, Bool}","page":"Introduction","title":"Supergrassi.clean_1d_values","text":"Function to process the values that are split between uk, eu, world and stored in vectors.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.clean_2d_values-Tuple{Supergrassi.Data, Float64}","page":"Introduction","title":"Supergrassi.clean_2d_values","text":"Function to process the mValues stored in inputoutputmatrix:es in the data struct\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.clean_data-Tuple{Supergrassi.Data, Dict{String, Any}}","page":"Introduction","title":"Supergrassi.clean_data","text":"clean_data(data::Data, settings::Dict{String, Any})\n\nMain function for data cleaning. Should take in a Data struct and return a CleanData struct.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.clean_exports-Tuple{Supergrassi.InputOutput, Supergrassi.InputOutput, Float64, Vector, Bool, Dict{String, String}, Dict{String, String}}","page":"Introduction","title":"Supergrassi.clean_exports","text":"Exports need a special treatment because they are a sum of export and services_export data frames. Service export is scaled by the sum of eu and world exports. Further refactoring definitely possible here.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.clean_household-Tuple{Supergrassi.Data, Int64, Dict{String, String}, Dict{String, String}, Vector, Vector, Vector, Bool}","page":"Introduction","title":"Supergrassi.clean_household","text":"Function to process the household incomes and their derived data.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.convert_to_ratio!-Tuple{DataFrames.DataFrame}","page":"Introduction","title":"Supergrassi.convert_to_ratio!","text":"convert_to_ratio!(df::DataFrame)\n\nConvert regional vector data into fractions of the aggregate value. Then renormalise the aggregate value by its sum. Nans are replaced with 0's.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.convert_to_ratio!-Tuple{Supergrassi.InputMatrices}","page":"Introduction","title":"Supergrassi.convert_to_ratio!","text":"convert_to_ratio!(data::InputMatrices)\n\nConvert regional matrix data to fractions of the aggregate value Nans are replaced with 0's\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.convert_to_ratio!-Tuple{Supergrassi.RegionalData}","page":"Introduction","title":"Supergrassi.convert_to_ratio!","text":"convert_to_ratio!(data::RegionalData)\n\nConvert regional data into ratios of region / sum(regions)\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.correct_exports_with_services!-Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}","page":"Introduction","title":"Supergrassi.correct_exports_with_services!","text":"Helper function for exports\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.create_filepath-Tuple{String}","page":"Introduction","title":"Supergrassi.create_filepath","text":"create_filepath(basepath::String)\n\nCreates a file path.\n\nArguments\n\nfile_path::FilePath: The file path object.\n\nReturns\n\nBool: Whether the file path is valid.\n\nExamples\n\nfile_path = FilePath(\"data.csv\")\nprintln(is_valid) # true\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.create_filepath_from_template-Tuple{String, Dict{String, Any}}","page":"Introduction","title":"Supergrassi.create_filepath_from_template","text":"create_filepath_from_template(basepath::String, substitution_dict::Dict{String, Any})\n\nCreates a file path from a template string and a dictionary of substitutions.\n\nArguments\n\nbasepath::String: The template string.\nsubstitution_dict::Dict{String, Any}: The dictionary of substitutions.\n\nReturns\n\nFilePath: The file path object.\n\nExamples\n\nsubstitutions = Dict(\n    \"name\" => \"data\",\n    \"format\" => \"csv\",\n    \"directory\" => \"dir\",\n    \"suffix\" => 1,\n)\n\ntemplate = \"{directory}/{name}{suffix}.{format}\"\nfilepath = create_filepath_from_template(template, substitutions)\nprintln(filepath.path) # \"dir/data1.csv\"\nprintln(filepath.directory) # \"dir\"\nprintln(filepath.file) # \"data1.csv\"\nprintln(filepath.extension) # \".csv\"\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.read_data-Tuple{String, String, String}","page":"Introduction","title":"Supergrassi.read_data","text":"read_data(file::String, sheet::String, range::String)\n\nReads a data file and returns a DataFrame.\n\nArguments\n\nfile::String: The path to the file.\nsheet::String: The name of the sheet.\nrange::String: The range of cells to read.\n\nExamples\n\ndf = read_data(\"data.xlsx\", \"Sheet1\", \"A1:Z1000\")\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.read_data-Tuple{String}","page":"Introduction","title":"Supergrassi.read_data","text":"read_data(file::String)\n\nReads a data file and returns a DataFrame.\n\nArguments\n\nfile::String: The path to the file.\n\nExamples\n\ndf = read_data(\"data.csv\")\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.rescale_data!-Tuple{CleanData}","page":"Introduction","title":"Supergrassi.rescale_data!","text":"rescale_data!(data::CleanData)\n\nRe-scale the data that does not get convereted into a ratio explicitly, following https://github.com/UCL/Supergrassi/blob/main/code/matlab/macro_v2/DataCleaning/RescaleData.m.\n\n\n\n\n\n","category":"method"},{"location":"#Supergrassi.round_shares!","page":"Introduction","title":"Supergrassi.round_shares!","text":"round_shares!(data::RegionalData, threshold::Float64 = 1e-4)\n\nRound values below threshold in regional data to 0, then rescale so that regions sum to 1.\n\n\n\n\n\n","category":"function"},{"location":"#Supergrassi.round_shares!-2","page":"Introduction","title":"Supergrassi.round_shares!","text":"round_shares!(df::DataFrame, threshold = 1e-4)\n\nRound shares in regional vector data\n\n\n\n\n\n","category":"function"},{"location":"#Supergrassi.round_shares!-3","page":"Introduction","title":"Supergrassi.round_shares!","text":"round_shares!(data::InputMatrices, threshold = 1e-4)\n\nRound shares in regional matrix data\n\n\n\n\n\n","category":"function"},{"location":"#Constants","page":"Introduction","title":"Constants","text":"","category":"section"}]
}
